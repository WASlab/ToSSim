# ====================  FULL SCRATCH‑ONLY TOSSIM SETUP  ====================
set -e
trap 'echo "[!] Script aborted on line $LINENO"; exit 1' ERR


# 0️⃣  Resolve and verify scratch path (must already exist & be writable)
SCRATCH=${SCRATCH:-$HOME/scratch}   # cluster‑exported or fallback ~/scratch
if [[ ! -d "$SCRATCH" || ! -w "$SCRATCH" ]]; then
  echo "❌  $SCRATCH does not exist or is not writable. Aborting." ; exit 1
fi
echo "[✓] Using scratch at: $SCRATCH"
export SCRATCH=/home/hice1/wstigall6/scratch  # or whatever your scratch is
export HF_HOME="$SCRATCH/hf_cache"
export TRANSFORMERS_CACHE="$HF_HOME/transformers"
export HF_DATASETS_CACHE="$HF_HOME/datasets"
cd "$SCRATCH"   # stay inside scratch for the rest of the script

# 1️⃣  Miniforge install inside scratch (if conda not already on PATH)
MF="$SCRATCH/miniforge3"
if ! command -v conda &>/dev/null; then
  echo "[+] Installing Miniforge into $MF …"
  [[ -d "$MF" ]] || {
    curl -sL https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh -o "$SCRATCH/miniforge.sh"
    bash "$SCRATCH/miniforge.sh" -b -p "$MF"
    rm "$SCRATCH/miniforge.sh"
  }
  export PATH="$MF/bin:$PATH"
else
  echo "[✓] Conda already available on PATH."
fi

# 2️⃣  Enable conda in this shell
source "$(conda info --base)/etc/profile.d/conda.sh"

# 3️⃣  Create or activate env **inside scratch**
ENV="$SCRATCH/tossim311"
if [[ -d "$ENV" ]]; then
  echo "[+] Env exists → activating $ENV"
else
  echo "[+] Creating Python‑3.11 env at $ENV"
  conda create -y -p "$ENV" python=3.11
fi
conda activate "$ENV"
echo "[✓] Python version: $(python -V)"

# 4️⃣  Clone or pull ToSSim repo **inside scratch**
REPO="$SCRATCH/ToSSim"
if [[ -d "$REPO/.git" ]]; then
  echo "[+] Updating existing ToSSim repo …"
  git -C "$REPO" pull
else
  echo "[+] Cloning ToSSim into $REPO …"
  git clone https://github.com/Salem-AI-Sim/ToSSim "$REPO"
fi
cd "$REPO"

# 5️⃣  Install core Python deps
python -m pip install -U pip setuptools wheel
python -m pip install transformers trl peft accelerate bitsandbytes datasets backoff sentencepiece tokenizers protobuf

# 6️⃣  Flash‑Attention: prebuilt wheel first, fall back to source build
FLASH_WHEEL="https://github.com/mjun0812/flash-attention-prebuild-wheels/releases/download/v0.3.10/flash_attn-2.7.4+cu128torch2.7-cp311-cp311-linux_x86_64.whl"
echo "[+] Installing Flash‑Attention …"
python -m pip install "$FLASH_WHEEL" --no-cache-dir || {
  echo "[!] Wheel mismatch → building from source (slow) …"
  python -m pip install --no-build-isolation flash-attn
}

# 7️⃣  Runtime tweak & summary banner
export PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True

echo "------------------------------------------------------------------"
python - <<'PY'
import sys, torch, platform, os
print("✅  ToSSim scratch‑only environment ready!")
print(" • Python :", sys.version.split()[0])
print(" • Torch  :", torch.__version__, "| CUDA:", torch.version.cuda, "| GPU avail:", torch.cuda.is_available())
print(" • Repo   :", os.getcwd())
print(" • Host   :", platform.node())
PY
echo "------------------------------------------------------------------"
echo "Re‑activate later with:"
echo "    conda activate $SCRATCH/tossim311"
echo "Everything—including Miniforge, env, repo, and outputs—resides in $SCRATCH"
# ==========================================================================

